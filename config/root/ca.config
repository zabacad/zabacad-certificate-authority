# OpenSSL configuration file for use with the `openssl ca` command.
# Full documentation in `man 1 ca` under "configuration file options".
# Configuration format documentation in `man 5 config`.
#
# vi:syntax=dosini

[ ca ]
# `openssl ca` uses the `[ ca ]` section
# Name of the section to actually use.
default_ca = root

[ root ]
# Base directory, relative to the working directory, *not* this file.
dir = .

# Where the root certificiate is.
certificate = $dir/cert
# Where the private key is.
private_key = $dir/key

# Where to put issued certificates.
new_certs_dir = $dir/issued
# Where to save the list of issued certificates.
database      = $dir/issued/issued
# Where to save the next serial number (hex).
serial        = $dir/serial

# Signing algorithm. Default SHA-1 is weak. (Only for RSA keys.)
default_md      = sha512
# Prevent issuing certificates matching those in the list of issued
# certificates. Disabled to allow renewal.
unique_subject  = no
# Keep fields from the CSR not mentioned in the policy.
preserve        = yes
# Name of extension section below.
x509_extensions = ext_root
# Name of the policy section below.
policy          = policy_root

# Either set `default_days` or set both `default_startdate` and
# `default_enddate`.
# Issue certificates valid for this many days.
# default_days = 365
# Issue certificates valid from/to these timestamps exactly.
# Useful for systems without realtime clocks or being obsessive.
default_startdate = 20210301000000Z
default_enddate   = 20260301000000Z

# How certificate details are displayed. Only affects display.
# Full options in `man 1 x509` under "name options".
# `ca_default` documented in `man 1 ca`.
name_opt = ca_default
cert_opt = ca_default

[ ext_root ]
# Extensions for the root certificate.
# Full documentation in `man 5 x509v3_extensions`.
# All extensions can be marked `critical`, meaning clients must reject the
# certificate if they do not understand the extension.
# Basic constraint CA:true means this certificate may sign other certificates.
basicConstraints       = critical, CA:true
# Key usage is weird and generally ignored. `keyCertSign` similar to CA:true.
keyUsage               = digitalSignature, keyCertSign
# Include the subject as a hash for better chain of trust.
subjectKeyIdentifier   = hash
# Include the issuing certificate's subject key ID. Fail if it doesn't have
# one. This works for self-signed keys.
authorityKeyIdentifier = keyid:always

[ ext_intermediate ]
# Extensions for the intermediate certificate.
# In this configuration file since the intermediate is issued here.
# Only difference is the path length, which prevents certificates issued by the
# intermediate certificate from issuing further certificates.
basicConstraints       = critical, CA:true, pathlen:0
keyUsage               = digitalSignature, keyCertSign
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always

[ policy_root ]
# Policy for the root certificate.
# Require a common name.
commonName = supplied
# Other fields on the CSR will be used due to `preserve` above.

[ policy_intermediate ]
# Policy for the intermediate certificate.
# In this configuration file since the intermediate is issued here.
commonName = supplied
